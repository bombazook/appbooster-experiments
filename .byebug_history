exit
subject.call
client.call('test')
client.seed
client.seed.call('test', :experiment1)
client.experiments_list['experiment1']
exit
client.experiments_list['experiment1']
client.experiments_list
client.seed.call('test', :experiment1)
client.seed.call('test', 'experiment1')
client.seed
client.call('test')
subject.call
exit
client.seed
experiments_list.keys.map(&:to_s)
redis.smembers('client:test.experiments')
redis.hgetall('client:test.experiments')
redis.get('client:test.experiments')
redi.get('client:test.experiments')
client.call('test')
subject.call
experiment1.call('test')
experiment1.call()
exit
subject.call
client.call('test1')
subject.call
client.call('test1')
subject.call
client.call('test')
client
exit
subject.call
App['model.client'].call('test')
subject.call
exit
subject.call(key)
second
first
exit
get_value(seed_key, experiment)
exit
results
exit
points
results
exit
results
exit
points
exit
kokoko
exit
redis.exists?(seed_key)
results
exit
seed_key
redis.get(seed_key)
get_value(seed_key, experiment)
value
exit
not_exist
exit
ololo
watched
exit
results
exit
results
exit
ololo
c
redis.get(seed_key)
rd.get(seed_key)
rd.exists?(seed_key)
exit
results
exit
results
exit
results
exit
redis.get("counter.experiment:#{experiment}")
redis.exists?(seed_key)
redis.get(seed_key)
seed
c
exit
App['persistence.redis'].get("counter.experiment:#{experiment}")
exit
App['persistence.redis'].get("counter.experiment:#{experiment}")
App['persistence.redis'].get("counter.experiment:#{experiment}"
(App['persistence.redis'].get("counter.experiment:#{experiment}")
"counter.experiment:#{experiment}"
App['persistence.redis']
App['persistence.redis'].keys
env['rack.hijack'].call.read
env['rack.hijack'].call
env['rack.hijack']
env['rack.hijack?']
env.hijack?
env.rack_hijack?
env.io
env.methods
r.get_header("Device-Token")
r.get_header(""Device-Token"")
r.methods
r.headers
r
r = Rack::Request.new(env)
Rack::Request.new(env)
Rack::Request
env.keys
headers
read
env["QUERY_STRING"]
env.keys
env
request
exit
contract.call(headers).to_monad
result.to_monad
result
